/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.mkdev.employee.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import org.mkdev.employee.model.EmployeeDetail;
import org.mkdev.employee.service.EmployeeDetailLocalService;
import org.mkdev.employee.service.persistence.EmployeeDetailPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the employee detail local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.mkdev.employee.service.impl.EmployeeDetailLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see org.mkdev.employee.service.impl.EmployeeDetailLocalServiceImpl
 * @see org.mkdev.employee.service.EmployeeDetailLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class EmployeeDetailLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements EmployeeDetailLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.mkdev.employee.service.EmployeeDetailLocalServiceUtil} to access the employee detail local service.
	 */

	/**
	 * Adds the employee detail to the database. Also notifies the appropriate model listeners.
	 *
	 * @param employeeDetail the employee detail
	 * @return the employee detail that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EmployeeDetail addEmployeeDetail(EmployeeDetail employeeDetail) {
		employeeDetail.setNew(true);

		return employeeDetailPersistence.update(employeeDetail);
	}

	/**
	 * Creates a new employee detail with the primary key. Does not add the employee detail to the database.
	 *
	 * @param empId the primary key for the new employee detail
	 * @return the new employee detail
	 */
	@Override
	@Transactional(enabled = false)
	public EmployeeDetail createEmployeeDetail(long empId) {
		return employeeDetailPersistence.create(empId);
	}

	/**
	 * Deletes the employee detail with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param empId the primary key of the employee detail
	 * @return the employee detail that was removed
	 * @throws PortalException if a employee detail with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EmployeeDetail deleteEmployeeDetail(long empId)
		throws PortalException {
		return employeeDetailPersistence.remove(empId);
	}

	/**
	 * Deletes the employee detail from the database. Also notifies the appropriate model listeners.
	 *
	 * @param employeeDetail the employee detail
	 * @return the employee detail that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EmployeeDetail deleteEmployeeDetail(EmployeeDetail employeeDetail) {
		return employeeDetailPersistence.remove(employeeDetail);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(EmployeeDetail.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return employeeDetailPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.mkdev.employee.model.impl.EmployeeDetailModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return employeeDetailPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.mkdev.employee.model.impl.EmployeeDetailModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return employeeDetailPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return employeeDetailPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return employeeDetailPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public EmployeeDetail fetchEmployeeDetail(long empId) {
		return employeeDetailPersistence.fetchByPrimaryKey(empId);
	}

	/**
	 * Returns the employee detail matching the UUID and group.
	 *
	 * @param uuid the employee detail's UUID
	 * @param groupId the primary key of the group
	 * @return the matching employee detail, or <code>null</code> if a matching employee detail could not be found
	 */
	@Override
	public EmployeeDetail fetchEmployeeDetailByUuidAndGroupId(String uuid,
		long groupId) {
		return employeeDetailPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the employee detail with the primary key.
	 *
	 * @param empId the primary key of the employee detail
	 * @return the employee detail
	 * @throws PortalException if a employee detail with the primary key could not be found
	 */
	@Override
	public EmployeeDetail getEmployeeDetail(long empId)
		throws PortalException {
		return employeeDetailPersistence.findByPrimaryKey(empId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(employeeDetailLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(EmployeeDetail.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("empId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(employeeDetailLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(EmployeeDetail.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("empId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(employeeDetailLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(EmployeeDetail.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("empId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<EmployeeDetail>() {
				@Override
				public void performAction(EmployeeDetail employeeDetail)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						employeeDetail);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(EmployeeDetail.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return employeeDetailLocalService.deleteEmployeeDetail((EmployeeDetail)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return employeeDetailPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the employee details matching the UUID and company.
	 *
	 * @param uuid the UUID of the employee details
	 * @param companyId the primary key of the company
	 * @return the matching employee details, or an empty list if no matches were found
	 */
	@Override
	public List<EmployeeDetail> getEmployeeDetailsByUuidAndCompanyId(
		String uuid, long companyId) {
		return employeeDetailPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of employee details matching the UUID and company.
	 *
	 * @param uuid the UUID of the employee details
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of employee details
	 * @param end the upper bound of the range of employee details (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching employee details, or an empty list if no matches were found
	 */
	@Override
	public List<EmployeeDetail> getEmployeeDetailsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<EmployeeDetail> orderByComparator) {
		return employeeDetailPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the employee detail matching the UUID and group.
	 *
	 * @param uuid the employee detail's UUID
	 * @param groupId the primary key of the group
	 * @return the matching employee detail
	 * @throws PortalException if a matching employee detail could not be found
	 */
	@Override
	public EmployeeDetail getEmployeeDetailByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return employeeDetailPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the employee details.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.mkdev.employee.model.impl.EmployeeDetailModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of employee details
	 * @param end the upper bound of the range of employee details (not inclusive)
	 * @return the range of employee details
	 */
	@Override
	public List<EmployeeDetail> getEmployeeDetails(int start, int end) {
		return employeeDetailPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of employee details.
	 *
	 * @return the number of employee details
	 */
	@Override
	public int getEmployeeDetailsCount() {
		return employeeDetailPersistence.countAll();
	}

	/**
	 * Updates the employee detail in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param employeeDetail the employee detail
	 * @return the employee detail that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EmployeeDetail updateEmployeeDetail(EmployeeDetail employeeDetail) {
		return employeeDetailPersistence.update(employeeDetail);
	}

	/**
	 * Returns the employee detail local service.
	 *
	 * @return the employee detail local service
	 */
	public EmployeeDetailLocalService getEmployeeDetailLocalService() {
		return employeeDetailLocalService;
	}

	/**
	 * Sets the employee detail local service.
	 *
	 * @param employeeDetailLocalService the employee detail local service
	 */
	public void setEmployeeDetailLocalService(
		EmployeeDetailLocalService employeeDetailLocalService) {
		this.employeeDetailLocalService = employeeDetailLocalService;
	}

	/**
	 * Returns the employee detail persistence.
	 *
	 * @return the employee detail persistence
	 */
	public EmployeeDetailPersistence getEmployeeDetailPersistence() {
		return employeeDetailPersistence;
	}

	/**
	 * Sets the employee detail persistence.
	 *
	 * @param employeeDetailPersistence the employee detail persistence
	 */
	public void setEmployeeDetailPersistence(
		EmployeeDetailPersistence employeeDetailPersistence) {
		this.employeeDetailPersistence = employeeDetailPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("org.mkdev.employee.model.EmployeeDetail",
			employeeDetailLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"org.mkdev.employee.model.EmployeeDetail");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return EmployeeDetailLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return EmployeeDetail.class;
	}

	protected String getModelClassName() {
		return EmployeeDetail.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = employeeDetailPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = EmployeeDetailLocalService.class)
	protected EmployeeDetailLocalService employeeDetailLocalService;
	@BeanReference(type = EmployeeDetailPersistence.class)
	protected EmployeeDetailPersistence employeeDetailPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}