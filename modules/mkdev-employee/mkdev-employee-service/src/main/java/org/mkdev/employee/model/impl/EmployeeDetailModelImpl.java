/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.mkdev.employee.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.mkdev.employee.model.EmployeeDetail;
import org.mkdev.employee.model.EmployeeDetailModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EmployeeDetail service. Represents a row in the &quot;mkdev_EmployeeDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmployeeDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeDetailImpl
 * @see EmployeeDetail
 * @see EmployeeDetailModel
 * @generated
 */
@ProviderType
public class EmployeeDetailModelImpl extends BaseModelImpl<EmployeeDetail>
	implements EmployeeDetailModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee detail model instance should use the {@link EmployeeDetail} interface instead.
	 */
	public static final String TABLE_NAME = "mkdev_EmployeeDetail";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "empId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "age", Types.INTEGER },
			{ "gender", Types.INTEGER },
			{ "address", Types.VARCHAR },
			{ "mobile", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("age", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("gender", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobile", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table mkdev_EmployeeDetail (uuid_ VARCHAR(75) null,empId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,email VARCHAR(75) null,age INTEGER,gender INTEGER,address VARCHAR(75) null,mobile VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table mkdev_EmployeeDetail";
	public static final String ORDER_BY_JPQL = " ORDER BY employeeDetail.empId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY mkdev_EmployeeDetail.empId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.mkdev.employee.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.mkdev.employee.model.EmployeeDetail"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.mkdev.employee.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.mkdev.employee.model.EmployeeDetail"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.mkdev.employee.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.mkdev.employee.model.EmployeeDetail"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long EMAIL_COLUMN_BITMASK = 2L;
	public static final long EMPID_COLUMN_BITMASK = 4L;
	public static final long FIRSTNAME_COLUMN_BITMASK = 8L;
	public static final long GROUPID_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.mkdev.employee.service.util.ServiceProps.get(
				"lock.expiration.time.org.mkdev.employee.model.EmployeeDetail"));

	public EmployeeDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _empId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _empId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmployeeDetail.class;
	}

	@Override
	public String getModelClassName() {
		return EmployeeDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("empId", getEmpId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("email", getEmail());
		attributes.put("age", getAge());
		attributes.put("gender", getGender());
		attributes.put("address", getAddress());
		attributes.put("mobile", getMobile());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long empId = (Long)attributes.get("empId");

		if (empId != null) {
			setEmpId(empId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Integer age = (Integer)attributes.get("age");

		if (age != null) {
			setAge(age);
		}

		Integer gender = (Integer)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String mobile = (String)attributes.get("mobile");

		if (mobile != null) {
			setMobile(mobile);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEmpId() {
		return _empId;
	}

	@Override
	public void setEmpId(long empId) {
		_columnBitmask = -1L;

		if (!_setOriginalEmpId) {
			_setOriginalEmpId = true;

			_originalEmpId = _empId;
		}

		_empId = empId;
	}

	public long getOriginalEmpId() {
		return _originalEmpId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_columnBitmask |= FIRSTNAME_COLUMN_BITMASK;

		if (_originalFirstName == null) {
			_originalFirstName = _firstName;
		}

		_firstName = firstName;
	}

	public String getOriginalFirstName() {
		return GetterUtil.getString(_originalFirstName);
	}

	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	@Override
	public int getAge() {
		return _age;
	}

	@Override
	public void setAge(int age) {
		_age = age;
	}

	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		_gender = gender;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getMobile() {
		if (_mobile == null) {
			return "";
		}
		else {
			return _mobile;
		}
	}

	@Override
	public void setMobile(String mobile) {
		_mobile = mobile;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				EmployeeDetail.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EmployeeDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmployeeDetail toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmployeeDetail)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeDetailImpl employeeDetailImpl = new EmployeeDetailImpl();

		employeeDetailImpl.setUuid(getUuid());
		employeeDetailImpl.setEmpId(getEmpId());
		employeeDetailImpl.setGroupId(getGroupId());
		employeeDetailImpl.setCompanyId(getCompanyId());
		employeeDetailImpl.setUserId(getUserId());
		employeeDetailImpl.setCreateDate(getCreateDate());
		employeeDetailImpl.setModifiedDate(getModifiedDate());
		employeeDetailImpl.setFirstName(getFirstName());
		employeeDetailImpl.setLastName(getLastName());
		employeeDetailImpl.setEmail(getEmail());
		employeeDetailImpl.setAge(getAge());
		employeeDetailImpl.setGender(getGender());
		employeeDetailImpl.setAddress(getAddress());
		employeeDetailImpl.setMobile(getMobile());

		employeeDetailImpl.resetOriginalValues();

		return employeeDetailImpl;
	}

	@Override
	public int compareTo(EmployeeDetail employeeDetail) {
		int value = 0;

		if (getEmpId() < employeeDetail.getEmpId()) {
			value = -1;
		}
		else if (getEmpId() > employeeDetail.getEmpId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmployeeDetail)) {
			return false;
		}

		EmployeeDetail employeeDetail = (EmployeeDetail)obj;

		long primaryKey = employeeDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EmployeeDetailModelImpl employeeDetailModelImpl = this;

		employeeDetailModelImpl._originalUuid = employeeDetailModelImpl._uuid;

		employeeDetailModelImpl._originalEmpId = employeeDetailModelImpl._empId;

		employeeDetailModelImpl._setOriginalEmpId = false;

		employeeDetailModelImpl._originalGroupId = employeeDetailModelImpl._groupId;

		employeeDetailModelImpl._setOriginalGroupId = false;

		employeeDetailModelImpl._originalCompanyId = employeeDetailModelImpl._companyId;

		employeeDetailModelImpl._setOriginalCompanyId = false;

		employeeDetailModelImpl._setModifiedDate = false;

		employeeDetailModelImpl._originalFirstName = employeeDetailModelImpl._firstName;

		employeeDetailModelImpl._originalEmail = employeeDetailModelImpl._email;

		employeeDetailModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmployeeDetail> toCacheModel() {
		EmployeeDetailCacheModel employeeDetailCacheModel = new EmployeeDetailCacheModel();

		employeeDetailCacheModel.uuid = getUuid();

		String uuid = employeeDetailCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			employeeDetailCacheModel.uuid = null;
		}

		employeeDetailCacheModel.empId = getEmpId();

		employeeDetailCacheModel.groupId = getGroupId();

		employeeDetailCacheModel.companyId = getCompanyId();

		employeeDetailCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeeDetailCacheModel.createDate = createDate.getTime();
		}
		else {
			employeeDetailCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeeDetailCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeeDetailCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeeDetailCacheModel.firstName = getFirstName();

		String firstName = employeeDetailCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			employeeDetailCacheModel.firstName = null;
		}

		employeeDetailCacheModel.lastName = getLastName();

		String lastName = employeeDetailCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			employeeDetailCacheModel.lastName = null;
		}

		employeeDetailCacheModel.email = getEmail();

		String email = employeeDetailCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			employeeDetailCacheModel.email = null;
		}

		employeeDetailCacheModel.age = getAge();

		employeeDetailCacheModel.gender = getGender();

		employeeDetailCacheModel.address = getAddress();

		String address = employeeDetailCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			employeeDetailCacheModel.address = null;
		}

		employeeDetailCacheModel.mobile = getMobile();

		String mobile = employeeDetailCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			employeeDetailCacheModel.mobile = null;
		}

		return employeeDetailCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", empId=");
		sb.append(getEmpId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", age=");
		sb.append(getAge());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", mobile=");
		sb.append(getMobile());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("org.mkdev.employee.model.EmployeeDetail");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>empId</column-name><column-value><![CDATA[");
		sb.append(getEmpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>age</column-name><column-value><![CDATA[");
		sb.append(getAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobile</column-name><column-value><![CDATA[");
		sb.append(getMobile());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EmployeeDetail.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EmployeeDetail.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _empId;
	private long _originalEmpId;
	private boolean _setOriginalEmpId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _originalFirstName;
	private String _lastName;
	private String _email;
	private String _originalEmail;
	private int _age;
	private int _gender;
	private String _address;
	private String _mobile;
	private long _columnBitmask;
	private EmployeeDetail _escapedModel;
}